!pip install lime


####neuer Code-Abschnitt in Google-Colab####


from tensorflow import keras
import numpy as np

#CIFAR-10 laden
(x_train, y_train), (x_test, y_test)= keras.datasets.cifar10.load_data()

#gleiche Vorverarbeitung wie bei ResNet
x_train, x_test= x_train/255.0, x_test/255.0
#x_train.shape, x_test.shape, np.unique(y_train).shape[0]

#Lables in one-hot Codierung umwandeln
y_train= keras.utils.to_categorical(y_train,10)
y_test= keras.utils.to_categorical(y_test,10)

model= keras.models.load_model('/content/cifar10_model01.h5')

#wegen one-hot keine Ausgaben von Modelleigenschaften möglich?
#test_loss, test_accuracy= model.evaluate(x_test,y_test)
#print(f'Testgenauigkeit: {test_accuracy:.4f}')


####neuer Code-Abschnitt in Goggle-Colab####


import numpy as np
import matplotlib.pyplot as plt
from lime import lime_image
from skimage.segmentation import mark_boundaries
import tensorflow as tf
from tensorflow import keras
from skimage.segmentation import quickshift
from skimage.segmentation import slic
from skimage.segmentation import felzenszwalb
from skimage.segmentation import watershed
import time

explainer= lime_image.LimeImageExplainer()

#labels
#cifar10-labels= ['flugzeug','auto', 'vogel', 'katze','hirsch', 'hund','frosch','pferd','schiff', 'LKW']

#Bild auswählen mit Index
image= x_test[331]
true_label= y_test[331]
true_label = np.argmax(true_label)

def prediction(images):
  return model.predict(images)

#zeit messen für LIME-Erklärung
start= time.time()

#LIME Erklärung
erklaerung= explainer.explain_instance(image,
                                       prediction,
                                       #top_labels= 5,
                                       #hide_color=3,
                                       num_samples= 1000, #je mehr desto genauer, aber ab einem bestimmten Punkt keinen Einfluss mehr und dauert auch länger
                                       segmentation_fn= quickshift, #slic oder felzenszwalb möglich
                                       batch_size=1000
                                       )

#Timer beenden + dauer berechenen
duration= time.time()- start
print(f"Zeit fü die Generierung der LIME-Erklärung: {duration:.2f} Sekunden")

#label_explain= np. argmax(model.predict(np.expand_dims(image, axis=0))) #für vorhergesagte klasse
label_explain= int(true_label) #für tatsächliche Klasse

#LIME-Erklärung visualisieren
temp, mask= erklaerung.get_image_and_mask(
    label_explain,
    positive_only= False, #Zeigt positive und negative Regionen
    num_features= 5, #Anzahl hervorgehobener Features
    hide_rest= False) #Zeigt auch nicht erklärte Teile des Bildes


#originalbild und LIME-Erklärung ausgeben
plt.figure(figsize=(4,2))

plt.subplot(1,2,1)
plt.title('Origial Bild')
plt.imshow(image)
plt.axis('off')

plt.subplot(1,2,2)
plt.title('LIME-Erklärung')
plt.imshow(mark_boundaries(temp, mask)) #Superpixel Grenzen anzeigen
plt.axis('off')
plt.show()

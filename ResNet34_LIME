!pip install git+https://github.com/qubvel/classification_models.git #Vortrainiertes Modell aus GitHub laden


####neuer Code-Abschnitt in Google-Colab####


!pip install lime


####neuer Code-Abschnitt in Google-Colab####


import numpy as np
import keras
import matplotlib.pyplot as plt
from keras.datasets import cifar10
from tensorflow.keras.utils import to_categorical
from classification_models.keras import Classifiers
ResNet34, preprocess_input= Classifiers.get('resnet34')
import tensorflow as tf

model=tf.keras.models.load_model('/content/cifar10_resnet34.h5')

#CIFAR10 laden
(X_train,y_train), (X_test, y_test)= cifar10.load_data()

#normalisieren
#X_train, X_test= X_train/255.0, X_test/255.0

X_train.shape, X_test.shape, np.unique(y_train).shape[0]

#one hot codierung
anz_classes= 10
y_train= to_categorical(y_train, anz_classes)
y_test=to_categorical(y_test, anz_classes)

model.evaluate(X_test, y_test)


####neuer Code-Abschnitt in Google-Colab####


import numpy as np
#import matplotlib.pyplot as plt
from lime import lime_image
from skimage.segmentation import mark_boundaries
from tensorflow import keras
from skimage.segmentation import quickshift
from skimage.segmentation import slic
from skimage.segmentation import felzenszwalb
import time

explainer= lime_image.LimeImageExplainer()

#class_names= ["airplane", "automobile", "bird", "cat", "deer", "dog", "frog", "horse", "ship", "truck"]

#Bild auswählen
image= X_test[734]
true_label= y_test[734]
true_label = np.argmax(true_label)

#Vorhersage
def pred(images):
  return model.predict(images)

start= time.time() #Zeit messen

#LIME-Erklärung
explanation= explainer.explain_instance(
    image,
    pred,
    #top_labels= 5,
    #hide_color= 3,
    num_samples= 1000, #Anzahl Samples (je mehr desto genauer (bis zu einer bestimmten Anzahl) aber langsamer)
    segmentation_fn= quickshift,
    batch_size=1000)

#Zeitmessung beenden
duration= time.time()-start
print(f"Zeit für die Generierung der LIME-Erklärung: {duration:.2f} Sekunden")

#label_explain= np.argmax(model.predict(np.expand_dims(image, axis=0))) #vorhergesagte KLasses als Zahl
label_explain= int(true_label) #für tatsächliche Klasse

#LIME-Erklärung Visualisierung
temp, mask= explanation.get_image_and_mask(
    label_explain,
    positive_only= False, #positive und negative Bildbereiche
    num_features= 5, #Anzahl hervorgehobener Features
    hide_rest= False) #auch nicht erklärte Bereiche des Bildes anzeigen

#Originalbild und Erklärung anzeigen
plt.figure(figsize=(4,2))

plt.subplot(1,2,1)
plt.title('Original')
plt.imshow(image)
plt.axis('off')

plt.subplot(1,2,2)
plt.title('LIME-Erklärung')
plt.imshow(mark_boundaries(temp, mask)) #Superpixel Grenzen anzeigen
plt.axis('off')
plt.show()
